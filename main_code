//Initialize system variables
const int systemFreq = 200;   //System clock frequency in Hz
const int sysResolution = 8;  //Number of bits for PWM channel
long systemPercent = 0.1;    //Percentage change in the period
long systemSP = 2000;         //Default starting period
long systemTP = 100;         //Default target period
long systemBuffer = 20;       //Buffer time between states
long systemCheckTime = 3000;  //Default time between speed checks
//End system variables

/*------------------------------------------------------------------------------------*/
//State Variables
volatile int stopStirring = 0;
volatile int atSpeed = 0;
volatile int currentSN = 0;
volatile int smallMode = 0;
//Time variables
volatile unsigned long currentMillis = 0;
volatile unsigned long previousMillis = 0;
//Period variables
volatile long currentPeriod = systemSP;
volatile long currentTarget = systemTP;
volatile long periodChange = 0;
//End variable initialization

//*------------------------------------------------------------------------------------*/
void setup() {
  //PWM setup
  ledcSetup(0, systemFreq, sysResolution);
  ledcAttachPin(23, 0);
  ledcWrite(0, 250);
  ledcSetup(1, systemFreq, sysResolution);
  ledcAttachPin(22, 1);
  ledcWrite(1, 250);

  //LED setup
  /*
  pinMode(0, OUTPUT);
  pinMode(1, OUTPUT );
  pinMode(2, INPUT);
  pinMode(3, OUTPUT);
  attachInterrupt(0, stopInterrupt, FALLING);
  */
}   //End setup

/*------------------------------------------------------------------------------------*/
class largeOrient {
  int coilPin1;
  int coilPin2;
  volatile long period;       //Period of whole cycle in ms
  volatile long onTime;       //When the coils turn on
  volatile long offTime;      //When the coils turn off
  long bufferTime;            //Length of the between state buffer
  long stateNumber;           //Ordinal number of this state
  volatile int coilState;     //1 if the coil is on
  volatile unsigned long previousMillis;

  public:
  largeOrient(int pin1, int pin2, long inPeriod, int inSN, long inBuffer) {
    coilPin1 = pin1;
    coilPin2 = pin2;
    pinMode(coilPin1, OUTPUT);
    pinMode(coilPin2, OUTPUT);

    stateNumber = inSN;
    period = inPeriod;
    bufferTime = inBuffer;
    onTime = (period / 4) - bufferTime;
    offTime = (3 * (period / 4)) + bufferTime;
    coilState = 0;
    previousMillis = 0;
  }   //End largeOrient constructor 

  int stateUpdate(unsigned long inMillis, int inNumber) {
    if(stateNumber == inNumber) {
      if((coilState == 1) && (inMillis - previousMillis >= onTime)) {
        previousMillis = inMillis;
        coilState = 0;
        digitalWrite(coilPin1, LOW);
        digitalWrite(coilPin2, LOW);
        return 1;
      }
      else if((coilState == 0) && (inMillis - previousMillis >= offTime)) {
        previousMillis = inMillis;
        coilState = 1;
        digitalWrite(coilPin1, HIGH);
        digitalWrite(coilPin2, HIGH);
      }
    }
    return 0;
  }   //End stateUpdate function

  void periodChange(long inPC) {
    period = inPC;
    onTime = (period / 4) - bufferTime;
    offTime = (3 * (period / 4)) + bufferTime;
  }   //End periodChange function

  void reset() {
    coilState = 0;
    digitalWrite(coilPin1, LOW);
    digitalWrite(coilPin1, LOW);
  }   //End reset function
};    //End largeOrient class
/*------------------------------------------------------------------------------------*/
long findPeriodChange(long inCurPer, long inTarPer) {
  long tempVal;
  long returnVal = inCurPer * systemPercent;
  if(inCurPer > inTarPer) {
    tempVal = inCurPer - inTarPer;
    if(tempVal < returnVal) {
      returnVal = -tempVal;
      return returnVal;
    }
    else {
      returnVal = -returnVal;
      return returnVal;
    }
  }
  else if(inCurPer < inTarPer) {
    tempVal = inTarPer - inCurPer;
    if(tempVal < returnVal) {
      return tempVal;
    }
    else {
      return returnVal;
    }
  }
  else {
    returnVal = 0;
    return returnVal;
  }
}   //End findNumSteps function
/*------------------------------------------------------------------------------------*/
//Initialize largeOrient instances
/* UF/R: 34,35
 * DF/R: 32,33
 * RF/R: 25,26
 * LF/R: 27,14 */
largeOrient upNdownS(12, 33, systemSP, 0, systemBuffer);
largeOrient rightNleftS(25, 14, systemSP, 1, systemBuffer);
largeOrient downNupS(32, 13, systemSP, 2, systemBuffer);
largeOrient leftNrightS(27, 26, systemSP, 3, systemBuffer);
//End object initialization

/*------------------------------------------------------------------------------------*/
void stopInterrupt() {
  stopStirring = 1;
}   //End stopInterrupt

/*------------------------------------------------------------------------------------*/
void loop() {
  if(stopStirring == 0) {
    
    //Large stirring
    while((stopStirring == 0) && (smallMode == 0)) {
      currentMillis = millis();
      
      //Rotation cycle
      if(upNdownS.stateUpdate(currentMillis, currentSN)==1)
        currentSN = 1;
      if(rightNleftS.stateUpdate(currentMillis, currentSN)==1)
        currentSN = 2;
      if(downNupS.stateUpdate(currentMillis, currentSN)==1)
        currentSN = 3;
      if(leftNrightS.stateUpdate(currentMillis, currentSN)==1)
        currentSN = 0;
/*
      //Speed change
      if((currentPeriod != currentTarget) &&
      (currentMillis - previousMillis >= systemCheckTime) &&
      (currentSN == 0)) {
        previousMillis = currentMillis;
        periodChange = findPeriodChange(currentPeriod, currentTarget);
        currentPeriod += periodChange;
        upNdownS.periodChange(currentPeriod);
        rightNleftS.periodChange(currentPeriod);
        downNupS.periodChange(currentPeriod);
        leftNrightS.periodChange(currentPeriod);
      }   //End speed change if
      */
  
      //Full speed pin
      if(currentPeriod == currentTarget)
        digitalWrite(0, HIGH);
    }   //End large spinning while
  
    //Small stirring
    while((stopStirring == 0) && (smallMode == 1)) {
      currentMillis = millis();
      /*
      //Rotation cycle
      if(upNdownS.stateUpdate(currentMillis, currentSN)==1)
        currentSN = 1;
      if(rightNleftS.stateUpdate(currentMillis, currentSN)==1)
        currentSN = 2;
      if(downNupS.stateUpdate(currentMillis, currentSN)==1)
        currentSN = 3;
      if(leftNrightS.stateUpdate(currentMillis, currentSN)==1)
        currentSN = 0;
      */
  
      //Speed change
      if((currentPeriod != currentTarget) &&
      (currentMillis - previousMillis >= systemCheckTime) &&
      (currentSN == 0)) {
        previousMillis = currentMillis;
        periodChange = findPeriodChange(currentPeriod, currentTarget);
        currentPeriod += periodChange;
        upNdownS.periodChange(currentPeriod);
        rightNleftS.periodChange(currentPeriod);
        downNupS.periodChange(currentPeriod);
        leftNrightS.periodChange(currentPeriod);
      }   //End speed change if
  
      //Full speed pin
      if(currentPeriod == currentTarget)
        digitalWrite(0, HIGH);
    }   //End small stirring while

    //Reset coils
    currentPeriod = systemSP;
    upNdownS.reset();
    rightNleftS.reset();
    downNupS.reset();
    leftNrightS.reset();
    upNdownS.periodChange(currentPeriod);
    rightNleftS.periodChange(currentPeriod);
    downNupS.periodChange(currentPeriod);
    leftNrightS.periodChange(currentPeriod);
  }   //End stirring if
}   //End loop
